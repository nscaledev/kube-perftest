{% macro full_name(benchmark) -%}
{{- benchmark.kind | lower -}}-{{- benchmark.metadata.name -}}
{%- endmacro %}


{% macro default_labels(benchmark, component = None) -%}
{{ settings.kind_label }}: {{ benchmark.kind }}
{{ settings.namespace_label }}: {{ benchmark.metadata.namespace }}
{{ settings.name_label }}: {{ benchmark.metadata.name }}
{%- if component %}
{{ settings.component_label }}: {{ component }}
{%- endif %}
{%- endmacro %}


{% macro labels(benchmark, component = None, extra = None, extra2 = None) -%}
{{-
  benchmark.spec.default_metadata.labels |
    mergeconcat(extra.labels | default({})) |
    mergeconcat(extra2.labels | default({})) |
    mergeconcat(default_labels(benchmark, component) | fromyaml) |
    toyaml
}}
{%- endmacro %}


{% macro annotations(benchmark, extra = None, extra2 = None) -%}
{{-
  benchmark.spec.default_metadata.annotations |
    mergeconcat(extra.annotations | default({})) |
    mergeconcat(extra2.annotations | default({})) |
    toyaml
}}
{%- endmacro %}


{% macro metadata(benchmark, component = None, extra = None, extra2 = None) -%}
labels:
  {{ labels(benchmark, component, extra, extra2) | indent(2) }}
annotations:
  {{ annotations(benchmark, extra, extra2) | indent(2) }}
{%- endmacro %}


{% macro pod_metadata(benchmark, component = None, extra = None, collect_logs = False) -%}
{{-
  metadata(benchmark, component, benchmark.spec.pods, extra) |
    fromyaml |
    mergeconcat(
      {
        "labels": {
          settings.log_collection_label: "true",
        },
      }
      if collect_logs
      else {}
    ) |
    toyaml
-}}
{%- endmacro %}


{% macro container_defaults(benchmark, extra = None) -%}
image: {{ benchmark.spec.image }}
imagePullPolicy: {{ benchmark.spec.image_pull_policy.value }}
resources:
  {{
    benchmark.spec.pods.resources |
      mergeconcat(extra.resources | default({})) |
      toyaml |
      indent(2)
  }}
{%- endmacro %}


{% macro pod_defaults(benchmark, extra = None) -%}
{%- if benchmark.spec.host_network %}
hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet
{%- endif %}
nodeSelector:
  {{
    benchmark.spec.pods.node_selector |
      mergeconcat(extra.node_selector | default({})) |
      toyaml |
      indent(2)
  }}
tolerations:
  {{
    benchmark.spec.pods.tolerations |
      mergeconcat(extra.tolerations | default([])) |
      toyaml |
      indent(2)
  }}
{%- endmacro %}


{% macro job_defaults(benchmark) -%}
{%- endmacro %}


{% macro distribution_exclusive(benchmark, extra = None) -%}
affinity:
  nodeAffinity:
    {{
      benchmark.spec.pods.node_affinity |
        mergeconcat(extra.node_affinity | default({})) |
        toyaml |
        indent(4)
    }}
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: {{ settings.kind_label }}
              operator: Exists
        topologyKey: "kubernetes.io/hostname"
{%- endmacro %}


{% macro distribution_spread(benchmark, component = None, extra = None) -%}
affinity:
  nodeAffinity:
    {{
      benchmark.spec.pods.node_affinity |
        mergeconcat(extra.node_affinity | default({})) |
        toyaml |
        indent(4)
    }}
  # Avoid pods from other jobs
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: {{ settings.kind_label }}
              operator: Exists
            - key: {{ settings.kind_label }}
              operator: NotIn
              values:
                - {{ benchmark.kind }}
        topologyKey: "kubernetes.io/hostname"
      - labelSelector:
          matchExpressions:
            - key: {{ settings.namespace_label }}
              operator: Exists
            - key: {{ settings.namespace_label }}
              operator: NotIn
              values:
                - {{ benchmark.metadata.namespace }}
        topologyKey: "kubernetes.io/hostname"
      - labelSelector:
          matchExpressions:
            - key: {{ settings.name_label }}
              operator: Exists
            - key: {{ settings.name_label }}
              operator: NotIn
              values:
                - {{ benchmark.metadata.name }}
        topologyKey: "kubernetes.io/hostname"
# Make sure the pods for the benchmark/component are evenly spread
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: "kubernetes.io/hostname"
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        {{ labels(benchmark, component) | indent(8) }}
    nodeAffinityPolicy: Honor
    nodeTaintsPolicy: Honor
{%- endmacro %}


{% macro ssh_configmap(benchmark) -%}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ macros.full_name(benchmark) }}-ssh-config
  labels:
    {{ labels(benchmark) | indent(4) }}
data:
  01-default-port.conf: |
    Port {{ benchmark.spec.ssh_port }}
{%- endmacro %}


{% macro ssh_volume(benchmark) -%}
name: ssh-config
configMap:
  name: {{ macros.full_name(benchmark) }}-ssh-config
{%- endmacro %}


{% macro ssh_volume_mount(benchmark) -%}
name: ssh-config
mountPath: /etc/ssh/ssh_config.d/01-default-port.conf
subPath: 01-default-port.conf
readOnly: true
{%- endmacro %}
