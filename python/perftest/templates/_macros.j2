{% macro default_labels(benchmark, component_name = None) -%}
{{ settings.kind_label }}: {{ benchmark.kind }}
{{ settings.namespace_label }}: {{ benchmark.metadata.namespace }}
{{ settings.name_label }}: {{ benchmark.metadata.name }}
{%- if component_name %}
{{ settings.component_label }}: {{ component_name }}
{%- endif %}
{%- endmacro %}

{% macro labels(benchmark, component_name = None, component_overrides = None) -%}
{{-
  benchmark.spec.labels |
    mergeconcat(component_overrides.labels | default({})) |
    mergeconcat(default_labels(benchmark, component_name) | fromyaml) |
    toyaml
}}
{%- endmacro %}

{% macro metadata(benchmark, component_name = None, component_overrides = None) -%}
labels:
  {{ labels(benchmark, component_name, component_overrides) | indent(2) }}
annotations:
  {{
    benchmark.spec.annotations |
      mergeconcat(component_overrides.annotations | default({})) |
      toyaml |
      indent(2)
  }}
{%- endmacro %}

{% macro container_defaults(benchmark, component_overrides = None) -%}
resources:
  {{
    benchmark.spec.resources |
      mergeconcat(component_overrides.resources | default({})) |
      toyaml |
      indent(2)
  }}
{%- endmacro %}

{% macro pod_defaults(benchmark, component_overrides = None) -%}
priorityClassName: {{ benchmark.status.priority_class_name }}
{%- if benchmark.spec.host_network %}
hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet
{%- endif %}
nodeSelector:
  {{
    benchmark.spec.node_selector |
      mergeconcat(component_overrides.node_selector | default({})) |
      toyaml |
      indent(2)
  }}
tolerations:
  {{
    benchmark.spec.tolerations |
      mergeconcat(component_overrides.tolerations | default([])) |
      toyaml |
      indent(2)
  }}
{%- endmacro %}

{% macro job_defaults(benchmark, component_overrides = None) -%}
{%- endmacro %}

{% macro distribution_exclusive(benchmark) -%}
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: {{ settings.kind_label }}
              operator: Exists
        topologyKey: "kubernetes.io/hostname"
{%- endmacro %}

{% macro distribution_spread(benchmark, component = None) -%}
affinity:
  # Avoid pods from other jobs
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: {{ settings.kind_label }}
              operator: Exists
            - key: {{ settings.kind_label }}
              operator: NotIn
              values:
                - {{ benchmark.kind }}
        topologyKey: "kubernetes.io/hostname"
      - labelSelector:
          matchExpressions:
            - key: {{ settings.namespace_label }}
              operator: Exists
            - key: {{ settings.namespace_label }}
              operator: NotIn
              values:
                - {{ benchmark.metadata.namespace }}
        topologyKey: "kubernetes.io/hostname"
      - labelSelector:
          matchExpressions:
            - key: {{ settings.name_label }}
              operator: Exists
            - key: {{ settings.name_label }}
              operator: NotIn
              values:
                - {{ benchmark.metadata.name }}
        topologyKey: "kubernetes.io/hostname"
# Make sure the pods for the benchmark/component are evenly spread
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: "kubernetes.io/hostname"
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        {{ labels(benchmark, component) | indent(8) }}
    nodeAffinityPolicy: Honor
    nodeTaintsPolicy: Honor
{%- endmacro %}

{% macro ssh_configmap(benchmark) -%}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ benchmark.metadata.name }}-ssh-config
  labels:
    {{ labels(benchmark) | indent(4) }}
data:
  01-default-port.conf: |
    Port {{ benchmark.spec.ssh_port }}
{%- endmacro %}

{% macro ssh_volume(benchmark) -%}
name: ssh-config
configMap:
  name: {{ benchmark.metadata.name }}-ssh-config
{%- endmacro %}

{% macro ssh_volume_mount(benchmark) -%}
name: ssh-config
mountPath: /etc/ssh/ssh_config.d/01-default-port.conf
subPath: 01-default-port.conf
readOnly: true
{%- endmacro %}
